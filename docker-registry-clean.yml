---
- name: clean docker registry
  hosts: all
  vars:
    registry: "{{ docker_host }}"
    registry_user: "{{ docker_username }}"
    registry_pass: "{{ docker_password }}"
    registry_schema: "{{ docker_host_schema }}"
    registry_url: "{{ registry_schema }}://{{ registry }}/v2"
    applications:
      - conmgmt
  tasks:
    - name: Fetch tags for applications
      uri:
        method: GET
        url: "{{ registry_url }}/{{ item }}/tags/list"
        user: "{{ registry_user }}"
        password: "{{ registry_pass }}"
        return_content: yes
      register: tags
      with_items: "{{ applications }}"
    - name: Flatten tags results into single array
      set_fact:
        tags_dict: "{{ tags_dict | default ({}) | combine ( { item.json.name : item.json.tags } ) }}"
      with_items: "{{ tags.results }}"
      loop_control:
        label: "{{ item.json.name }}"
      when: tags is defined and tags.results | length > 0
    - name: Fetch manifests
      uri:
        method: GET
        url: "{{ registry_url }}/{{ item[0].key }}/manifests/{{ item[1] }}"
        user: "{{ registry_user }}"
        password: "{{ registry_pass }}"
        headers:
          accept: application/vnd.docker.distribution.manifest.v2+json
        return_content: yes
      register: manifests_to_remove
      # when: item[1] is search('-SNAPSHOT') and item[1] != item[0].value[-1]
      loop: "{{ tags_dict | dict2items | subelements('value') }}"
      loop_control:
        label: "{{ item[0].key ~ '/manifests/' ~ item[1] }}"
    - name: Delete Manifests
      uri:
        method: DELETE
        url: "{{ registry_url }}/{{ item.item[0].key }}/manifests/{{ item.docker_content_digest }}"
        user: "{{ registry_user }}"
        password: "{{ registry_pass }}"
        return_content: yes
        status_code:
          - 202 # Accepted
      when: not item.skipped is defined
      loop: "{{ manifests_to_remove.results }}"
      loop_control:
        label: "DELETE {{ registry_url }}/{{ item.item[0].key }}/manifests/{{ item.docker_content_digest | default ('skipped...') }}"
    - name: Execute Garbage Collect from Docker
      command: docker exec -i registry bin/registry garbage-collect /etc/docker/registry/config.yml
      args:
        chdir: /opt/docker-registry
      register: garbage_collect
      when: garbage_collect is not defined
